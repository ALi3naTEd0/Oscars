name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build"
        required: true
        default: "1.0.0-1"
      platforms:
        description: "Platforms to build"
        required: true
        type: choice
        options:
          - all
          - android
          - linux
          - flatpak
          - windows
          - macos
      release_type:
        description: "Release type"
        required: true
        type: choice
        options:
          - draft
          - release
        default: 'draft'
  push:
    tags:
      - 'v*'  # matches any version tag starting with 'v'

permissions:
  contents: write

jobs:
  # STEP 1: BUILD PHASE
  android-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'android')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/Oscars/.github/workflows/android.yml@main
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  linux-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'linux')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/Oscars/.github/workflows/linux.yml@main
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  windows-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'windows')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/Oscars/.github/workflows/windows.yml@main
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  macos-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'macos')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/Oscars/.github/workflows/macos.yml@main
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  flatpak-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'flatpak')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ALi3naTEd0/Oscars/.github/workflows/flatpak.yml@main
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  # STEP 2: CREATE RELEASE
  create-release:
    name: Create Release
    needs: [android-build, linux-build, windows-build, macos-build, flatpak-build]
    if: |
      !cancelled() && !failure() &&
      (needs.android-build.result == 'success' || needs.android-build.result == 'skipped') &&
      (needs.linux-build.result == 'success' || needs.linux-build.result == 'skipped') &&
      (needs.windows-build.result == 'success' || needs.windows-build.result == 'skipped') &&
      (needs.macos-build.result == 'success' || needs.macos-build.result == 'skipped') &&
      (needs.flatpak-build.result == 'success' || needs.flatpak-build.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      release_url: ${{ steps.set_release_url.outputs.url }}
    steps:
      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}"

      - name: Create Dist Directory
        run: mkdir -p dist

      - name: List Available Artifacts
        run: |
          echo "Available artifacts:"
          gh api /repos/${{ github.repository }}/actions/artifacts \
            --jq '.artifacts[] | {name: .name, size: .size_in_bytes, created: .created_at}'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
          pattern: '*'

      - name: Debug Directory Contents
        run: |
          echo "Root directory:"
          ls -la
          echo "Dist directory content:"
          ls -la dist/ || echo "Dist directory is empty or doesn't exist"

      - name: Organize Artifacts
        run: |
          echo "Initial dist content:"
          ls -la dist/
          
          # Move nested files to root of dist/
          find dist -mindepth 2 -type f -exec mv -t dist/ {} +
          find dist -type d -empty -delete
          
          echo "Final dist content:"
          ls -lh dist/

      - name: Create Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref }}
          name: Release v${{ steps.get_version.outputs.VERSION }}
          files: dist/**/*
          draft: ${{ github.event.inputs.release_type != 'release' }}
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release URL
        id: set_release_url
        run: |
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          TAG_NAME="${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}"
          RELEASE_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/tag/${TAG_NAME}"
          echo "Setting release URL to: $RELEASE_URL"
          echo "url=$RELEASE_URL" >> "$GITHUB_OUTPUT"
          
      - name: Debug Release Info
        run: |
          echo "Release created successfully:"
          echo "Version: ${{ steps.get_version.outputs.VERSION }}"
          echo "URL: ${{ steps.set_release_url.outputs.url }}"

  # STEP 3: UPDATE DOCUMENTATION (Only if release type is 'release')
  update-docs:
    name: Update Documentation
    needs: create-release
    if: |
      !cancelled() && !failure() &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.release_type == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Release Type
        run: |
          echo "Release type: ${{ github.event.inputs.release_type }}"
          echo "Skipping documentation update for draft releases"
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update Documentation
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          
          # Update README.md links
          # First update the download URLs paths
          sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" README.md
          
          # Update both filename formats (with _ and with -)
          sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|oscars_${VERSION}|g" README.md
          sed -i "s|oscars-[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|oscars-${VERSION}|g" README.md
          
          # Update architecture specific Android APKs that use both formats
          sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_arm64-v8a\.apk|oscars_${VERSION}_arm64-v8a.apk|g" README.md
          sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_armeabi-v7a\.apk|oscars_${VERSION}_armeabi-v7a.apk|g" README.md
          sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_x86_64\.apk|oscars_${VERSION}_x86_64.apk|g" README.md
          sed -i "s|oscars-arm64-v8a-[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk|oscars_${VERSION}_arm64-v8a.apk|g" README.md
          sed -i "s|oscars-armeabi-v7a-[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk|oscars_${VERSION}_armeabi-v7a.apk|g" README.md
          sed -i "s|oscars-x86_64-[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk|oscars_${VERSION}_x86_64.apk|g" README.md

          # Update both filename formats (with _ and with -) for windows portable
          sed -i "s|oscars-portable\.zip|oscars_${VERSION}_portable.zip|g" README.md
          sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_portable\.zip|oscars_${VERSION}_portable.zip|g" README.md

          # Final inspection to catch any missed patterns
          grep -o "oscars[_-][0-9].*" README.md || echo "No remaining version strings found"
          
          # Update any displayed version text
          sed -i "s|Version [0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+|Version ${VERSION}|g" README.md
          sed -i "s|\"version\": \"[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\"|\"version\": \"${VERSION}\"|g" README.md
          
          # Commit changes if any
          git add README.md
          git commit -m "docs: update version to ${VERSION}" || echo "No changes to commit"
          git push || echo "No changes to push"
          
          # Update Website
          if [ -d "docs" ]; then
            cd docs
            
            # Update all download links in HTML
            sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" index.html
            
            # Update file patterns for all formats
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.exe|oscars_${VERSION}.exe|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.dmg|oscars_${VERSION}.dmg|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.AppImage|oscars_${VERSION}.AppImage|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_amd64\.deb|oscars_${VERSION}_amd64.deb|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_x86_64\.rpm|oscars_${VERSION}_x86_64.rpm|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.tar\.gz|oscars_${VERSION}.tar.gz|g" index.html
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.flatpak|oscars_${VERSION}.flatpak|g" index.html
            
            # Update Android APK pattern
            sed -i "s|oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk|oscars_${VERSION}.apk|g" index.html
            
            # Update Windows portable link format
            sed -i "s|oscars-portable\.zip|oscars_${VERSION}_portable.zip|g" index.html

            # Update Android button click handler
            sed -i "s|window.open('https://github.com/ALi3naTEd0/Oscars/releases/latest/download/oscars_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.apk'|window.open('https://github.com/ALi3naTEd0/Oscars/releases/latest/download/oscars_${VERSION}.apk'|g" index.html
            
            # Update the fallback version for when GitHub API calls fail
            sed -i "s|document.getElementById('current-version').textContent = '[0-9.]\+-[0-9]\+'|document.getElementById('current-version').textContent = '${VERSION}'|g" index.html
            
            # Verify the update was successful
            echo "Website version updated to: ${VERSION}"
            grep -n "current-version" index.html
            
            # Debug information
            echo "Website changes:"
            git diff index.html
            
            # Commit changes
            cd ..
            git add docs/index.html
            git commit -m "docs: update website to version ${VERSION}" || echo "No changes to website"
            git push || echo "No website changes to push"
          else
            echo "Docs directory not found, skipping website update"
          fi
