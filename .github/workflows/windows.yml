name: Windows Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      version:
        description: "Version to build"
        required: true
        type: string
      upload_url:
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
        env:
          LANG: en_US.UTF-8

      - name: Install CMake
        uses: lukka/get-cmake@latest
        
      - name: Install Windows SDK
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\Pub\Cache
            ~\AppData\Local\flutter
            build\windows\_deps
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}-
            ${{ runner.os }}-flutter-

      - name: Download Icon
        run: |
          # Create assets directory if it doesn't exist (and don't fail if it does)
          if (!(Test-Path "assets")) {
              New-Item -ItemType Directory -Path "assets" -Force
          }
          
          $iconUrl = "https://raw.githubusercontent.com/ALi3naTEd0/Oscars/main/assets/app-icon.ico"
          $outputPath = "assets/app-icon.ico"
          Write-Host "Downloading icon from: $iconUrl"
          Invoke-WebRequest -Uri $iconUrl -OutFile $outputPath
          
          if (Test-Path $outputPath) {
              Write-Host "Icon downloaded successfully to: $outputPath"
              Get-ChildItem -Path "assets" -Recurse
          } else {
              Write-Error "Failed to download icon"
              exit 1
          }

      - name: Build Windows
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          flutter build windows --release

      # Create and upload portable version
      - name: Create Portable Package
        shell: pwsh
        run: |
          # Create directory structure
          $appDir = "oscars-${{ inputs.version || github.event.inputs.version }}"
          New-Item -ItemType Directory -Path $appDir
          Copy-Item "build\windows\x64\runner\Release\*" -Destination "$appDir\" -Recurse
          
          # Create ZIP with new naming format
          Compress-Archive -Path "$appDir" -DestinationPath "oscars_${{ inputs.version || github.event.inputs.version }}_portable.zip"

      - name: Upload Portable Package
        if: inputs.upload_url == ''
        uses: actions/upload-artifact@v4
        with:
          name: oscars-Portable
          path: oscars_${{ inputs.version || github.event.inputs.version }}_portable.zip

      - name: Upload Portable Release Asset
        if: inputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: oscars_${{ inputs.version || github.event.inputs.version }}_portable.zip
          asset_name: oscars_${{ inputs.version || github.event.inputs.version }}_portable.zip
          asset_content_type: application/zip

      # Create and upload installer version
      - name: Install Inno Setup
        run: |
          choco install innosetup -y

      - name: Create Installer
        shell: pwsh
        env:
          VERSION: ${{ inputs.version || github.event.inputs.version }}
        run: |
          New-Item -ItemType Directory -Path "installers\Output" -Force
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installers\inno_script_script.iss

      - name: Upload Setup Package
        uses: actions/upload-artifact@v4
        with:
          name: oscars-Setup
          path: installers/Output/oscars_${{ inputs.version || github.event.inputs.version }}.exe

      - name: Upload Setup Release Asset
        if: inputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: installers/Output/oscars_${{ inputs.version || github.event.inputs.version }}.exe
          asset_name: oscars_${{ inputs.version || github.event.inputs.version }}.exe
          asset_content_type: application/x-msdownload